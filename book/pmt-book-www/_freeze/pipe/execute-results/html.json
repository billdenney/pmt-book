{
  "hash": "39ff9c31636bf016cf2e6ae766d7bcb3",
  "result": {
    "markdown": "---\ntitle: Pipe interface\nsubtitle: > \n  A better way to compose and style your table.\n---\n\n\n\n## Basics\n\nMostly working with this data; but some others come in later to illustrate\ncertain features.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- pmt_summarized\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 9\n  STUDY       DOSE   FORM    N     WT    CRCL  AGE   ALB   SCR  \n  <chr>       <chr>  <chr>   <chr> <chr> <chr> <chr> <chr> <chr>\n1 12-DEMO-001 100 mg tablet  80    71.4  104   33.7  4.20  1.06 \n2 12-DEMO-001 150 mg capsule 16    89.4  122   24.4  4.63  1.12 \n3 12-DEMO-001 150 mg tablet  48    81.7  104   34.4  3.83  0.910\n4 12-DEMO-001 150 mg troche  16    94.0  93.2  27.4  4.94  1.25 \n5 12-DEMO-001 200 mg tablet  64    67.9  100   27.5  4.25  1.10 \n6 12-DEMO-001 200 mg troche  16    76.6  99.2  22.8  4.54  1.15 \n```\n:::\n:::\n\nYou start out a pipeline by passing your data frame into `st_new()`\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% st_new() %>% class\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"stobject\"    \"environment\"\n```\n:::\n:::\nThis creates an object that gets revised by subsequent steps in the pipeline, \nadding features and styling as you go. \n\nFor the final step in the pipeline, we'll send the object to `stable()` to \ncreate the table\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% st_new() %>% stable() %>% head(n=9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\\\\setlength{\\\\tabcolsep}{5pt} \"                                            \n[2] \"\\\\begin{threeparttable}\"                                                   \n[3] \"\\\\renewcommand{\\\\arraystretch}{1.3}\"                                       \n[4] \"\\\\begin{tabular}[h]{lllllllll}\"                                            \n[5] \"\\\\hline\"                                                                   \n[6] \"STUDY & DOSE & FORM & N & WT & CRCL & AGE & ALB & SCR \\\\\\\\\"                \n[7] \"\\\\hline\"                                                                   \n[8] \"12-DEMO-001 & 100 mg & tablet & 80 & 71.4 & 104 & 33.7 & 4.20 & 1.06 \\\\\\\\\" \n[9] \"12-DEMO-001 & 150 mg & capsule & 16 & 89.4 & 122 & 24.4 & 4.63 & 1.12 \\\\\\\\\"\n```\n:::\n:::\n\n\n\\clearpage\n\n## Simple table\n\nYou can terminate the pipeline and create a tabular table by sending to \n`stable()`\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% st_new() %>% stable()\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% stable()\n```\n:::\n\n## Long table\n\nYou can also pipe to `stable_long()` to make a long table\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% st_new() %>% stable_long()\n```\n:::\n\n\n\n## Annotate with file names\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% st_files(r = \"foo.R\", output = \"foo.tex\")\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, r_file = \"foo.R\", output_file = \"foo.tex\")\n```\n:::\n\nNote that in the pipe version, we already have `file` in the function \nname so that gets dropped from the argument name. \n\n## Save a table\n\nFirst convert with `stable()` or `stable_long()` then save with `stable_save()`\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% \n  st_files(output = \"foo.tex\") %>%\n  stable() %>% \n  stable_save()\n```\n:::\n\n## Align columns\n\n- `st_center(...)`\n- `st_left(...)`\n- `st_right(...)`\n- `st_align(...)`\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% \n  st_center() %>% \n  stable() \n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, align = cols_center()) \n```\n:::\n\n\n## Rename columns\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% \n  st_rename(Weight = \"WT\") %>% \n  stable()\n```\n:::\n\nEquivalent call \n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, cols_rename = c(Weight = \"WT\")) \n```\n:::\n\n## Blank columns \n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% st_blank(WT, ALB, DOSE) %>% stable()\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, cols_blank = \"WT,ALB,DOSE\")\n```\n:::\n\n\n\n## Drop columns\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% st_drop(WT, ALB, DOSE) %>% stable()\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, drop = \"WT, ALB, DOSE\")\n```\n:::\n\n## Notes\n\n- Multiple calls are allowed; notes will accumulate\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% \n  st_notes(\"first note\") %>% \n  st_notes(\"second note\") %>% \n  stable()\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(\n  data, \n  notes = c(\"first note\", \"second note\")\n)\n```\n:::\n\n## Units\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% \n  st_units(WT = \"kg\", AGE = \"years\") %>% \n  stable()\n```\n:::\n\nNote that `st_units()` will automatically add parens to your units; this \ncan be suppressed with the `parens` argument. \n\nUnits can also be added as a list\n\n::: {.cell}\n\n```{.r .cell-code}\nu <- list(WT = \"kg\", AGE = \"years\")\n\nst_new(data) %>% \n  st_units(u) %>% \n  stable()\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, units = u)\n```\n:::\n\n## panel\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% \n  st_panel(\"STUDY\") %>% \n  stable()\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, panel = \"STUDY\")\n```\n:::\n\n## span\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% \n  st_span(\"Covariates\", c(WT, ALB, EGFR)) %>% \n  stable()\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, span = as.span(\"Covariates\", c(WT, ALB, EGFR)))\n```\n:::\n\n## hlines - at\n\nTo put horizontal lines at specific rows\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% st_hline(at = c(2,4,6))\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, hline_at = c(2,4,6))\n```\n:::\n\n## hlines - from\n\nTo calculate hlines based on data frame column values (for example, to break\nthe table by changing values of `STUDYf`)\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% st_hline(from = \"STUDYf\")\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, hline_from = \"STUDYf\")\n```\n:::\n\n## hlines - pattern\n\nTo search the table for a pattern and add hlines above matches\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% st_hline(pattern  = \"All\", cols = \"Summary\")\n```\n:::\n\nThe `cols` argument limits the search to the `Summary` column; omit this \nargument to search the whole table.\n\nThere is no equivalent call for this using straight `stable()`.\n\n## Clear replicate values\n\nTo create groups by \"clearing\" replicate values in a column\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(data) %>% st_clear_reps(STUDY) %>% stable()\n```\n:::\n\nEquivalent call\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, clear_reps = \"STUDY\")\n```\n:::\n\n\\clearpage\n\n# Pipe cheat table\n\n::: {.cell}\n::: {.cell-output-display}\n![](pipe_files/figure-html/unnamed-chunk-70-1.png){width=998}\n:::\n:::",
    "supporting": [
      "pipe_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}