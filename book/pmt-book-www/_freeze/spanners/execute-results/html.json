{
  "hash": "27d93a678b8ac0fee6d60b79cc4b81df",
  "result": {
    "markdown": "---\ntitle: Spanners\nsubtitle: Group table columns with spanners.\n---\n\n\n\n\n## Syntax\n\nSet the `span` argument to the output of `as.span()`. The key arguments\nfor `as.span()` are the spanner title and the names of the columns\nover which you want the spanner to run\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(stdata(), span = as.span(\"Covariates\", WT:SCR))\n```\n:::\n\nThe equivalent pipe syntax is\n\n::: {.cell}\n\n```{.r .cell-code}\nst_new(stdata()) %>% st_span(\"Covariates\", WT:SCR)\n```\n:::\n\n\n\n## Basics\n\nA column spanner puts a horizontal line over a sequence of column names and \nplaces a title above that line forming a column group. \n\nAs a trivial example: \n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- \n  tibble(\n    Tariffville = \"06081\",  Connecticut= \"CT\", \n    Minnesota = \"MN\", Minneapolis = \"55455\"\n  ) \n\ndata %>% stable(span = as.span(\"States\", Connecticut:Minnesota)) %>%  st_as_image()\n```\n\n::: {.cell-output-display}\n![](spanners_files/figure-html/unnamed-chunk-8-1.png){width=948}\n:::\n:::\n\n## Multiple spanners\n\nMultiple spanners can be added to a table by specifying the `level` for any \nspanner that you want to be placed above the lowest level spanner.  For \nexample, \n\n::: {.cell}\n\n```{.r .cell-code}\nsp <- list(\n  as.span(\"States\", Connecticut:Minnesota), \n  as.span(\"Important Locations\", Tariffville:Minneapolis, level = 2)\n)\ndata %>% stable(span = sp) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](spanners_files/figure-html/unnamed-chunk-10-1.png){width=948}\n:::\n:::\n\nNote that to specify multiple spanners, we pass a list of span objects. I've \nsimplified the code a bit here by creating that list as a standalone object\nand then passing the whole list as `span`.\n\n### Using pipe syntax\n\nFor problems like this, it might be preferable to use the pipe syntax\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  st_new() %>% \n  st_span(\"States\", Connecticut:Minnesota) %>% \n  st_span(\"Important Locations\", Tariffville:Minneapolis, level = 2) %>% \n  stable() %>% \n  st_as_image()\n```\n\n::: {.cell-output-display}\n![](spanners_files/figure-html/unnamed-chunk-12-1.png){width=948}\n:::\n:::\n\n## Breaking span title\n\nWe can make the title of the span break across multiple lines by using `...`\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, span = as.span(\"Important ... States\", Connecticut:Minnesota)) %>%\n  st_as_image()\n```\n\n::: {.cell-output-display}\n![](spanners_files/figure-html/unnamed-chunk-14-1.png){width=948}\n:::\n:::\n\n\n\n## Aligning span title\n\nBeginning with version 0.4.1, the span title can be left or right justified \nin addition to the default centering\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(\n  stdata(), \n  span = as.span(\"Covariates\", WT:SCR, align = 'l')\n) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](spanners_files/figure-html/unnamed-chunk-16-1.png){width=948}\n:::\n:::\n\n\\clearpage\n\n## Span created by splitting column names\n\n`colsplit()` is a way to create column spanners which are encoded into the \ncolumn names of the input data frame; the names are split on a separator \ncharacter (like `.`) and either the left or right side are taken as the title\nand the other is taken as the column name. \n\nConsider this data\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  A.first A.second B.third B.fourth\n1       1        2       3        4\n```\n:::\n:::\n\nNotice the natural grouping between `A.first` and `A.second`; we want `first`\nand `second` grouped together with the title `A`. Similar setup for `third` and\n`fourth` under the title `B`.\n\nWe can make table with spanners by passing a call to `colsplit()` as \n`span_split`\n\n::: {.cell}\n\n```{.r .cell-code}\ndd  %>% stable(span_split = colsplit(sep = '.')) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](spanners_files/figure-html/unnamed-chunk-20-1.png){width=948}\n:::\n:::\n\n### pivot_longer workflow\n\nThis is pattern is convenient when summarizing data in a long format. To \nto demonstrate, we'll calculate summary statistics for `WT` and `AGE` by `STUDY`\n\n::: {.cell}\n\n```{.r .cell-code}\nsumm <- \n  pmt_first %>%\n  pivot_longer(cols = c(\"WT\", \"AGE\")) %>% \n  filter(!is.na(value)) %>%\n  group_by(STUDYf, name) %>% \n  summarise(Mean = mean(value), Sd = sd(value), N = n(), .groups = \"drop\") %>%\n  mutate(across(Mean:N, sig)) %>% mutate(across(Mean:N, as.character))\n\nsumm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 5\n  STUDYf      name  Mean  Sd    N    \n  <fct>       <chr> <chr> <chr> <chr>\n1 12-DEMO-001 AGE   32.0  9.19  30   \n2 12-DEMO-001 WT    72.2  14.3  29   \n3 12-DEMO-002 AGE   35.0  8.20  50   \n4 12-DEMO-002 WT    72.4  11.5  49   \n5 11-DEMO-005 AGE   32.8  8.48  40   \n6 11-DEMO-005 WT    68.9  14.5  39   \n7 13-DEMO-001 AGE   34.2  9.67  40   \n8 13-DEMO-001 WT    69.4  11.6  40   \n```\n:::\n:::\n\nNow take 2 (or 3) more steps to get the table in the right shape to feed into \n`stable()`. **First**, pivot this `longer` using the summary stat name\n\n::: {.cell}\n\n```{.r .cell-code}\nlong <- pivot_longer(summ, cols = c(\"Mean\", \"Sd\", \"N\"), names_to = \"stat\")\nhead(long)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  STUDYf      name  stat  value\n  <fct>       <chr> <chr> <chr>\n1 12-DEMO-001 AGE   Mean  32.0 \n2 12-DEMO-001 AGE   Sd    9.19 \n3 12-DEMO-001 AGE   N     30   \n4 12-DEMO-001 WT    Mean  72.2 \n5 12-DEMO-001 WT    Sd    14.3 \n6 12-DEMO-001 WT    N     29   \n```\n:::\n:::\n\n**Second**, we'll make `name` more appealing / informative\n\n::: {.cell}\n\n```{.r .cell-code}\nlong <- mutate(long, name = recode(name, WT = \"Weight (kg)\", AGE = \"Age (years)\"))\n```\n:::\n\n**Third**, pivot this `wider` using the covariate `name` and `stat` \n\n::: {.cell}\n\n```{.r .cell-code}\nwide <- pivot_wider(long, names_from = c(\"name\", \"stat\"), names_sep = \"---\")\nwide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 7\n  STUDYf     `Age (years)--…` `Age (years)--…` `Age (years)--…` `Weight (kg)--…`\n  <fct>      <chr>            <chr>            <chr>            <chr>           \n1 12-DEMO-0… 32.0             9.19             30               72.2            \n2 12-DEMO-0… 35.0             8.20             50               72.4            \n3 11-DEMO-0… 32.8             8.48             40               68.9            \n4 13-DEMO-0… 34.2             9.67             40               69.4            \n# … with 2 more variables: `Weight (kg)---Sd` <chr>, `Weight (kg)---N` <chr>\n```\n:::\n:::\n\nNow we have column names set up to create the spanners\n\n::: {.cell}\n\n```{.r .cell-code}\nwide %>% stable(span_split = colsplit(sep = \"---\")) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](spanners_files/figure-html/unnamed-chunk-30-1.png){width=948}\n:::\n:::\n\nThis workflow takes several steps to complete, but once you identify the pattern\nit can be just an extra step or two  beyond what you're already doing to get \na nice table.\n",
    "supporting": [
      "spanners_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}