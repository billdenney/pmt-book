{
  "hash": "30fbb8cdaf941062e9062ca3c9bccdbb",
  "result": {
    "markdown": "---\ntitle: stable\nsubtitle: Create a simple table from a data frame.\n---\n\n\n\n\n\n## Syntax\n\nPass your data.frame into `stable()` \n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data)\n```\n:::\n\nOther formal arguments include:\n\n- **align** to set column alignment\n- **panel** to create groups of rows under a \"panel\" header\n- **span** to group columns under a \"spanner\" header\n- **notes** to create table notes\n- **sumrows** to insert summary rows \n- **units** that get placed below the corresponding column name\n- **drop** to omit certain columns from the table\n- **sizes** to set different table size attributes\n- **escape_fun** a function to sanitize table items\n\nYou can also pass a bunch of other arguments through `...` to further format\nthe table (see `?stable` for details)\n\n\n\n## Basics\n\n`stable()` is the name of the workhorse function that is used to turn \ndata.frames into `TeX` tables. This chapter will introduce the `stable()` \nfunction and how to us it to create basic tables. \n\nTo illustrate usage and features of `stable()`, we will use the `stdata` data \nset that comes with pmtables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- stdata()\n\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n. # A tibble: 6 Ã— 9\n.   STUDY       DOSE   FORM    N     WT    CRCL  AGE   ALB   SCR  \n.   <chr>       <chr>  <chr>   <chr> <chr> <chr> <chr> <chr> <chr>\n. 1 12-DEMO-001 100 mg tablet  80    71.4  104   33.7  4.20  1.06 \n. 2 12-DEMO-001 150 mg capsule 16    89.4  122   24.4  4.63  1.12 \n. 3 12-DEMO-001 150 mg tablet  48    81.7  104   34.4  3.83  0.910\n. 4 12-DEMO-001 150 mg troche  16    94.0  93.2  27.4  4.94  1.25 \n. 5 12-DEMO-001 200 mg tablet  64    67.9  100   27.5  4.25  1.10 \n. 6 12-DEMO-001 200 mg troche  16    76.6  99.2  22.8  4.54  1.15\n```\n:::\n:::\n\nWe can turn this data frame into a `TeX` table by passing it into `stable()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- stable(data)\n\nhead(out, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.  [1] \"\\\\setlength{\\\\tabcolsep}{5pt} \"                                            \n.  [2] \"\\\\begin{threeparttable}\"                                                   \n.  [3] \"\\\\renewcommand{\\\\arraystretch}{1.3}\"                                       \n.  [4] \"\\\\begin{tabular}[h]{lllllllll}\"                                            \n.  [5] \"\\\\hline\"                                                                   \n.  [6] \"STUDY & DOSE & FORM & N & WT & CRCL & AGE & ALB & SCR \\\\\\\\\"                \n.  [7] \"\\\\hline\"                                                                   \n.  [8] \"12-DEMO-001 & 100 mg & tablet & 80 & 71.4 & 104 & 33.7 & 4.20 & 1.06 \\\\\\\\\" \n.  [9] \"12-DEMO-001 & 150 mg & capsule & 16 & 89.4 & 122 & 24.4 & 4.63 & 1.12 \\\\\\\\\"\n. [10] \"12-DEMO-001 & 150 mg & tablet & 48 & 81.7 & 104 & 34.4 & 3.83 & 0.910 \\\\\\\\\"\n```\n:::\n:::\n\nNote that we have shown the raw latex code that is generated by `stable()`. That \nis to say: the output from `stable()` is a character vector of latex code \nfor the table. Note also that this character vector has a special class \nassociated with it: `stable`.  That means we can write functions that recognize\nthis character vector as output from `stable()` and we can have those functions\nprocess the character vector in special ways.\n\nWe can render that table in `TeX` **in the current Rmarkdown document** by\npassing the text to `st_asis()`. \n\n::: {.cell}\n\n```{.r .cell-code}\nout %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-10-1.png){width=948}\n:::\n:::\n\nRemember to only call `st_asis()` when you are rendering tables inline in an \nRmd document.  If you are sending table code to a `TeX` report, then \nyou will save them to a file and then include them into your report. \n\nThe remaining sections of this chapter will show you how to modify and \nenhance this output in the more basic ways.  We will implement separate \nchapters for more complicated table manipulations. \n\n\n## Annotate with file names\n\npmtables can track and annotate your table with the filenames of the \nR code that generated the table (`r_file`) as well as the output file \nwhere you write the the table `.tex` code (`output_file)`. \n\nTo have pmtables annotate your table with these file names, pass them \nin with the `r_file` and `output_file` arguments\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- stable(data, r_file = \"tables.R\", output_file = \"tables.tex\")\n```\n:::\n\nWhen we look at the rendered table, these names will show up as annotations\nat the bottom of the table\n\n::: {.cell}\n\n```{.r .cell-code}\nout %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-14-1.png){width=948}\n:::\n:::\n\n## Saving your stable\n\nSaving your stable **can** be as easy as sending it into `writeLines()`\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteLines(out, con = tempfile(tmpdir = '.', fileext = \".tex\"))\n```\n:::\n\nBut remember that we passed in the `output_file` argument to `stable()` \nand we can use that data to save the table code to the file we named \nin that argument. \n\nNote that our `stable` object has another attribute now called `stable_file`\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n. $class\n. [1] \"stable\"\n. \n. $stable_file\n. [1] \"tables.tex\"\n```\n:::\n:::\n\nThis has the value that we passed in as `output_file`. To save our table \nto `stable_file`, we call `stable_save()`\n\n::: {.cell}\n\n```{.r .cell-code}\nstable_save(out)\n```\n:::\n\nThere is a `dir` argument to `stable_save()` that we can use to to select\nthe directory where the file will be saved\n\n::: {.cell}\n\n```{.r .cell-code}\nstable_save(out, dir = tempdir())\n```\n:::\n\nAnd if you look at the default value for `dir` in `?stable_save`, you'll \nsee that this is associated with an option called `pmtables.dir`;  you \ncan set that option to your default output directory and your tables \nwill be saved there until you change that\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(pmtables.dir = tempdir())\n\nstable_save(out)\n```\n:::\n\n\n\n\n## Align columns\n\nUse the `align` argument to align column data to the left, center or right. Use\na `cols_*` function to specify the default alignment for all columns\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp <- tibble(AB = 1, CDEFGHIJ = 2, KL = 3)\nstable(tmp, align = cols_center()) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-28-1.png){width=948}\n:::\n:::\n\nYou can pass in exceptions to the default\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(tmp, align = cols_center(CDEFGHIJ = \"r\")) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-30-1.png){width=948}\n:::\n:::\n\nOr you can pass an alignment directive and the columns that are bound by that \ndirective\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(tmp, align = cols_center(.l = \"AB,KL\")) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-32-1.png){width=948}\n:::\n:::\n\nA special directive called `.outer` lets you specify the alignment of the first\nand last column in the table. For example, this code puts the first column to \nthe left and the last column to the right.\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(tmp, align = cols_center(.outer = \"lr\")) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-34-1.png){width=948}\n:::\n:::\n\n### Fixed column widths\n\nUse `col_ragged(size)` to force a column to be a fixed size. \n\n::: {.cell}\n\n```{.r .cell-code}\nstable(tmp, align = cols_center(AB = col_ragged(2))) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-36-1.png){width=948}\n:::\n:::\n\nBy default, the unit is `cm` so that the first column (`AB`) has a width \nof 2 cm regardless of the contents. \n\nSee `cols_align()` help topic for more information and argument descriptions.\n\n\n## Manipulating columns and names\n\n### Rename columns\n\nYou can change the name that appears in the rendered table with `cols_rename`\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  slice(1:3) %>% \n  stable(cols_rename = c(Age = \"AGE\", Weight = \"WT\")) %>%\n  st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-38-1.png){width=948}\n:::\n:::\n\nNote that the rename syntax follows the tidyselect convention of putting the \nnew name on the left and the old name on the right.\n\n### Hide a column name \n\nYou can also \"erase\" the name of a column in the output\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  slice(1:3) %>% \n  stable(cols_blank = \"WT,ALB,SCR\") %>% \n  st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-40-1.png){width=948}\n:::\n:::\n\n### Don't print any table header information\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  slice(1:3) %>% \n  stable(cols_omit = TRUE) %>% \n  st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-42-1.png){width=948}\n:::\n:::\n\n\n### Unmask column names\n\nIn tibbles, you can't have duplicate column names.  The `cols_split` argument\nlets you unmask the names when duplicate names are prefixed with a tag and \na delimiter\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp <- tibble(a.A = 1, b.A = 2, c.A = 3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp %>% stable(cols_split = '.') %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-46-1.png){width=948}\n:::\n:::\n\n\n### Make column names bold\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% slice(1:2) %>% stable(cols_bold = TRUE) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-48-1.png){width=948}\n:::\n:::\n\n\n### Drop a column from the table\n\nIf we want to prevent a column from appearing in the output table (e.g. \n`FORM`)\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n. # A tibble: 6 Ã— 9\n.   STUDY       DOSE   FORM    N     WT    CRCL  AGE   ALB   SCR  \n.   <chr>       <chr>  <chr>   <chr> <chr> <chr> <chr> <chr> <chr>\n. 1 12-DEMO-001 100 mg tablet  80    71.4  104   33.7  4.20  1.06 \n. 2 12-DEMO-001 150 mg capsule 16    89.4  122   24.4  4.63  1.12 \n. 3 12-DEMO-001 150 mg tablet  48    81.7  104   34.4  3.83  0.910\n. 4 12-DEMO-001 150 mg troche  16    94.0  93.2  27.4  4.94  1.25 \n. 5 12-DEMO-001 200 mg tablet  64    67.9  100   27.5  4.25  1.10 \n. 6 12-DEMO-001 200 mg troche  16    76.6  99.2  22.8  4.54  1.15\n```\n:::\n:::\n\nlist the column name as `drop`\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, drop = \"FORM\") %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-52-1.png){width=948}\n:::\n:::\n\nOf course some tidyverse could accomplish the same thing\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% select(-FORM) %>% stable() \n```\n:::\n\n\n## Other customizations\n\n### Notes\n\nArbitrary notes can get added to any table using the `notes` argument. \n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  slice(1:3) %>% \n  stable(notes = \"Showing just the first three rows\") %>% \n  st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-56-1.png){width=948}\n:::\n:::\n\nThe appearance of the notes can be controlled by calling `noteconf()` and \npassing the result as `note_config`. See `?tab_notes()` for more details.\n\n\n### Units\n\npmtables can automatically place units underneath the appropriate column. To \ndo this, generate a list with names that match the column names you want to \nlabel with units. \n\n::: {.cell}\n\n```{.r .cell-code}\nu <- list(\n  WT = \"kg\", CRCL = \"ml/min\", AGE = \"year\", ALB = \"g/dL\", \n  SCR = \"mg\\\\%\"\n) %>% map(~paste0(\"(\", .x, \")\"))\n```\n:::\n\nThen pass that list as `units` to `stable()`\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(data, units = u) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-60-1.png){width=948}\n:::\n:::\n\n### Multi-line column headers\n\nIf the column header is long, you can break it across multiple lines.  By \ndefault, use `...`  in the column name\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(`First line ... Second line` = 123456789) %>% \n  stable() %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-62-1.png){width=948}\n:::\n:::\n\nThe break can be introduced through the rename mechanism\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(a = 1) %>% \n  stable(cols_rename =  c(`First ... Second` = \"a\")) %>% \n  st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-64-1.png){width=948}\n:::\n:::\n\nLook at the `?tab_cols` help topic for the `cols_break` argument; this \nlets you change the character sequence used for the break. \n\n\n### Insert horizontal lines\n\nPass `hlines_at` to insert horizontal lines above specific rows.  This can \nbe either logical vector with the same length as the number of rows in the \ntable or a vector of integers.\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(stdata(), hline_at = c(3,5)) %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-66-1.png){width=948}\n:::\n:::\n\nor \n\n::: {.cell}\n\n```{.r .cell-code}\nstable(stdata(), hline_at = data$FORM == \"tablet\") %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-68-1.png){width=948}\n:::\n:::\n\n\nPass `hlines_from` to derive hline locations based on non-repeating values \nin a table column. Notice how this behaves. \n\n::: {.cell}\n\n```{.r .cell-code}\nstable(stdata(), hline_from = \"DOSE\") %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-70-1.png){width=948}\n:::\n:::\n\n\nSee the `?tab_hlines` help topic for more info. See also `st_hline()` for \nthe pipe equivalent with additional feature.\n\n\n### Clear replicate values\n\nYou can create groups in a table by \"clearing\" replicate values\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(stdata(), clear_reps = \"STUDY\") %>% st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-72-1.png){width=948}\n:::\n:::\n\nThis can be combined with an hline\n\n::: {.cell}\n\n```{.r .cell-code}\nstable(stdata(), clear_reps = \"STUDY\", hline_from = \"STUDY\") %>% \n  st_as_image()\n```\n\n::: {.cell-output-display}\n![](stable_files/figure-html/unnamed-chunk-74-1.png){width=948}\n:::\n:::\n\nSee `?tab_clear_reps` for other options, including an option for clearing\nbased on several grouping variables.\n",
    "supporting": [
      "stable_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}